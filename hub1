using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleAppHUB
{
    class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        /// 

        //AzureHub Connection String
        //IoT HUb Owner
        private const string DeviceConnectionString = "HostName=AzureHubAdmin.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=RfwpywxPk2rMdPn1L8ZoSf4wiWUxjutzego3fuKZeCU=";
        static ServiceClient serviceClient;



        [STAThread]
        static void Main(string[] args)
        {
            serviceClient = ServiceClient.CreateFromConnectionString(DeviceConnectionString);
            Program program = new Program();


            //
            //Application.EnableVisualStyles();
            //Application.SetCompatibleTextRenderingDefault(false);
           // Application.Run(new Form1());
        }


        public Program()
        {
            //call sendEvent method
            DeviceClient deviceClient = DeviceClient.CreateFromConnectionString(DeviceConnectionString);
            sendEvent().wait();
            receiveCommands(deviceClient).wait();
        }

        //sending Event to IoTHub
        static async Task SendEvent()
        {
            //this is the static message that we send to IoT Hub once the application d launched
            //you can use device Explorer on your laptop to send the message you want, to the IoT Hub
            //make sure to have  the right device ID written in deivice explorer
            string dataBuffer = "IoT in 90 senconds";

            //Microsoft.Azure.Devices.Message EventMessage = new Microsoft.Azure.Devices.Message(Encoding.ASCII.GetString);
            await serviceClient.SendAsync("MyDevice", EventMessage);
        }

        async Task ReceiveCommands(DeviceClient deviceClient)
        {
            Console.WriteLine("\n Device waiting for IoT Hub command...\n");
            Microsoft.Azure.Devices.Client.Message receivedMessage;
            string messageData;
            while (true)
            {
                receivedMessage = await deviceClient.ReceivedAsync(TimeSpan.FromSeconds(1));
                if (receivedMessage != null)
                {
                    messageData = Encoding.ASCII.GetString(receivedMessage.GetBytes());
                    Console.WriteLine("\t{0}> Message Received: {1}", DateTime.Now.ToLocalTime().messageData);
                    await deviceClient.CompleteAsync(receivedMessage);
                }
            }
        }


    }
}
